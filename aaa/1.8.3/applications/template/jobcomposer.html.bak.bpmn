<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" style="height: 100%;border: none;padding: 0px;margin: 0px;">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
	<meta http-equiv="X-UA-Compatible" content="IE=10; IE=9; IE=8; IE=7;  IE=EDGE"/>
	<meta content="JobComposer" name="keywords" />
	<meta content="JobComposer" name="description" />
	<meta name="generator" content="JobComposer"/>
	<link rel="shortcut icon" href="/static/images/favicon.ico" type="image/x-icon" />
	<title>JobComposer-Malakas</title>
	<link rel="stylesheet" href="/static/js/model/bootstrap-3.3.1-dist/dist/css/bootstrap.min.css" type="text/css"/>
	<link rel="stylesheet" href="/static/js/model/bootstrap-3.3.1-dist/dist/css/bootstrap-theme.min.css" type="text/css"/>
    
    <link rel="stylesheet" href="http://ajax.googleapis.com/ajax/libs/jqueryui/1.11.3/themes/smoothness/jquery-ui.css" />
    <link rel="stylesheet" href="/static/js/model/GoJS-1.6.4/extensions/DataInspector.css" type="text/css"/>
    <link rel="stylesheet" href="/static/js/model/GoJS-1.6.4/extensions/BPMN.css" type="text/css"/>
	<style type="text/css">
        /* Move down content because we have a fixed navbar that is 50px tall */
		body {
			padding-top: 50px;
            height: 100%;
		}
        
        /*
         * Sidebar
         */
        /* Hide for mobile, show later */
        .sidebar {
          display: none;
        }
        @media (min-width: 768px) {
          .sidebar {
            position: fixed;
            top: 51px;
            bottom: 130px;
            left: 0;
            z-index: 1000;
            display: block;
            padding: 20px;
            overflow-x: hidden;
            overflow-y: auto; /* Scrollable contents if viewport is shorter than content. */
            background-color: #f5f5f5;
            border-right: 1px solid #eee;
          }
        }
        
        /*
        panel-title style
        */
        .panel-title {
            font-size: 14px;
            font-weight: bold;
        }
        
        /* 
        dragable palette and info
        */
        .draggable {
          display: inline-block;
          vertical-align: top;
          border: 4px solid #BBB;
          border-radius: 4px;
          background-color: #F5F5F5;

          position: absolute;
          top: 20px;
          left: 120px;
          z-index: 500;
        }

        .handle {
          background-color: lightblue;
          cursor: move;
          text-align: center;
          font: bold 12px sans-serif;
        }

        #infoDraggable {
          font: 12px helvetica, sans-serif;

        }

        #myInfo {
          width: 100%;
          overflow: hidden;
        }

        #myPaletteDiv {
          background-color: #F5F5F5;
          width: 100%;
          height: 100%;
        }

        /*
        One simple way of making a div fill its space,
        with allowances for the title (top) and the resize handle (bottom)
        */
        #paletteContainer {
          position:absolute;
          bottom: 14px;
          left: 0px;
          right: 0px;
          top: 14px;
        }
        
        .panel {
            border: none;
        }
        .panel-title {
            font-size: 16px;
            font-weight: normal;
        }
	</style>
</head>
<body>
	<nav class="navbar navbar-fixed-top navbar-inverse">
		<div class="container">
			<div class="navbar-header">
				<button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
				<span class="sr-only">Toggle navigation</span>
				<span class="icon-bar"></span>
				<span class="icon-bar"></span>
				<span class="icon-bar"></span>
				</button>
				<a class="navbar-brand" href="/" style="font-size:18px;font-weight:bold;color:#FFF;"><!--<img alt="Brand" src="/static/images/favicon.ico" title="junneyang.sinaapp.com" style="margin-left:5px;height:24px;width:24px;"/>-->Malakas</a>
			</div>
			<div id="navbar" class="collapse navbar-collapse js-navbar-collapse">
				<ul class="nav navbar-nav">
					<li><a href="/">Home</a></li>
                    <li class="active"><a href="jobcomposer.html">JobComposer</a></li>
				</ul>
			</div>
		</div>
	</nav>
    <div class="container-fluid">
        <div>
    <div id="currentFile">(Unsaved File)</div>
      <ul id="menuui">
        <li><a href="#">File</a>
          <ul>
            <li><a href="#" onclick="newDocument()">New</a></li>
            <li><a href="#" onclick="openDocument()">Open...</a></li>
            <li><a href="#" onclick="saveDocument()">Save</a></li>
            <li><a href="#" onclick="saveDocumentAs()">Save As...</a></li>
            <li><a href="#" onclick="removeDocument()">Delete...</a></li>
          </ul>
        </li>
        <li><a href="#">Edit</a>
          <ul>
            <li><a href="#" onclick="myDiagram.commandHandler.undo()">Undo</a></li>
            <li><a href="#" onclick="myDiagram.commandHandler.redo()">Redo</a></li>
            <li><a href="#" onclick="myDiagram.commandHandler.cutSelection()">Cut</a></li>
            <li><a href="#" onclick="myDiagram.commandHandler.copySelection()">Copy</a></li>
            <li><a href="#" onclick="myDiagram.commandHandler.pasteSelection()">Paste</a></li>
            <li><a href="#" onclick="myDiagram.commandHandler.deleteSelection()">Delete</a></li>
            <li><a href="#" onclick="myDiagram.commandHandler.selectAll()">Select All</a></li>
          </ul>
        </li>
        <li><a href="#">Align</a>
          <ul>
            <li><a href="#" onclick="myDiagram.commandHandler.alignLeft()">Left Sides</a></li>
            <li><a href="#" onclick="myDiagram.commandHandler.alignRight()">Right Sides</a></li>
            <li><a href="#" onclick="myDiagram.commandHandler.alignTop()">Tops</a></li>
            <li><a href="#" onclick="myDiagram.commandHandler.alignBottom()">Bottoms</a></li>
            <li><a href="#" onclick="myDiagram.commandHandler.alignCenterX()">Center X</a></li>
            <li><a href="#" onclick="myDiagram.commandHandler.alignCenterY()">Center Y</a></li>
          </ul>
        </li>
        <li><a href="#">Space</a>
          <ul>
            <li><a href="#" onclick="myDiagram.commandHandler.alignRow(askSpace())">In Row...</a></li>
            <li><a href="#" onclick="myDiagram.commandHandler.alignColumn(askSpace())">In Column...</a></li>
          </ul>
        </li>
        <li><a href="#">Options</a>
          <ul>
            <li><a href="#">
              <input id="grid" type="checkbox" name="options" value="grid" onclick="updateGridOption()">Grid</a></li>
            <li><a href="#">
              <input id="snap" type="checkbox" name="options" value="0" onclick="updateSnapOption()">Snapping</a></li>
          </ul>
        </li>
      </ul>
    <!--END menu bar -->
      
 

    <!-- Styling for this portion is in BPMN.css -->
    <div id="PaletteAndDiagram">
      <div id="sideBar">

    <span style="display: inline-block; vertical-align: top; padding: 5px; width:100%">
      <div id="accordion">
        <h4>Level 1 items</h4>
        <div>
          <div id="myPaletteLevel1" class="myPaletteDiv" ></div>
        </div>
        <h4>Level 2 items</h4>
        <div>
          <div id="myPaletteLevel2" class="myPaletteDiv"></div>
        </div>
        <h4>Other items</h4>
        <div>
          <div id="myPaletteLevel3" class="myPaletteDiv"></div>
        </div>
      </div>
    </span>          
          
        <div class="handle">Overview:</div>
        <div id="myOverviewDiv"></div>
      </div>
      <div id="myDiagramDiv"></div>
      <div id="description">
        <p>
          This sample describes templates and relationships typically used in <a href="http://en.wikipedia.org/wiki/Business_Process_Model_and_Notation">Business Process Model and Notation (BPMN)</a>,
          to be used as a starting point for developing BPMN or flow-like web applications.
        </p>
        <p>In addition to this HTML file, this sample uses the files:</p>
        <ul>
          <li><a href="BPMN.css">BPMN.css</a> for styling
          <li><a href="BPMN.js">BPMN.js</a> for the Diagram logic
          <li><a href="BPMNClasses.js">BPMNClasses.js</a> - Custom PoolLink and BPMNLinkingTool classes
          <li><a href="DrawCommandHandler.js">DrawCommandHandler.js</a> - Custom CommandHandler class
        </ul>
        <span>
            <div>
            <p>Additional sample data files:</p>
                <figure>
                    <img src="BPMNdata/BasicOrderProcess.png" onclick='loadJSON("BPMNdata/BasicOrderProcess.json")' title="Basic Order Process"></img>
                    <figcaption>Basic Order Process</figcaption>
                </figure>
                <figure>            
                    <img src="BPMNdata/OMG BPMN by Example Figure 5.1.png" onclick='loadJSON("BPMNdata/OMG BPMN by Example Figure 5.1.json")' title="OMG BPMN by Example Figure 5.1"></img>
                    <figcaption>OMG BPMN by Example Figure 5.1</figcaption>
                </figure>
                <figure> 
                    <img src="BPMNdata/OMG BPMN by Example Figure 5.2.png" onclick='loadJSON("BPMNdata/OMG BPMN by Example Figure 5.2.json")' title="OMG BPMN by Example Figure 5.2"></img>          
                    <figcaption>OMG BPMN by Example Figure 5.2</figcaption>
                </figure>
                <figure> 
                    <img src="BPMNdata/OMG BPMN by Example Figure 5.3.png" onclick='loadJSON("BPMNdata/OMG BPMN by Example Figure 5.3.json")' title="OMG BPMN by Example Figure 5.3"></img>          
                    <figcaption>OMG BPMN by Example Figure 5.3</figcaption>
                </figure>
          </div>
        </span>
      </div>

      </div>

    <div id="openDocument" class="draggable">
      <div id="openDraggableHandle" class="handle">Open File</div>
      <div id="openText" class="elementText">Choose file to open...</div>
      <select id="mySavedFiles" class="mySavedFiles"></select>
      <br />
      <button id="openBtn" class="elementBtn" type="button" onclick="loadFile()" style="margin-left: 70px">Open</button>
      <button id="cancelBtn" class="elementBtn" type="button" onclick="closeElement('openDocument')">Cancel</button>
    </div>

    <div id="removeDocument" class="draggable">
      <div id="removeDraggableHandle" class="handle">Delete File</div>
      <div id="removeText" class="elementText">Choose file to remove...</div>
      <select id="mySavedFiles2" class="mySavedFiles"></select>
      <br />
      <button id="removeBtn" class="elementBtn" type="button" onclick="removeFile()" style="margin-left: 70px">Remove</button>
      <button id="cancelBtn2" class="elementBtn" type="button" onclick="closeElement('removeDocument')">Cancel</button>
    </div>
  </div>

        <div class="push" style="height:130px;clear: both;"></div>
    </div>
    <!-- <div style="width:100%; white-space:nowrap;">
        <span style="display: inline-block; vertical-align: top; padding: 5px; width:10%">
            <div id="palettex" style="background-color: Snow; border: solid 1px gray; height: 800px"></div>
        </span>
        <span style="display: inline-block; vertical-align: top; padding: 5px; width:90%">
            <div id="myDiagramDivx" style="border: solid 1px black; width:100%; height:800px;background-color: #DAE4E4;"></div>
        </span>
        
        <div class="push" style="height:130px;clear: both;"></div>
    </div> -->
    <!-- <div style="min-height:100%;height: auto !important;height: 100%;margin: 0 auto -130px;">
        <div id="myDiagramDiv" style="border: solid 1px black; width:1000px; height:500px;background-color: #DAE4E4;"></div>
        <div class="push" style="height:130px;clear: both;"></div>
    </div> -->
    <footer class="footer" style="height:130px;margin-bottom:0px;padding-top:20px;background-color:black;clear:both;">
		<div class="container text-center">
			<p class="text-muted">Copyright ©2015 NSFOCUS. <a href="http://www.nsfocus.com">绿盟科技</a>. All Rights Reserved. </p>
			<p class="text-muted">Technical Support : <a href="#">nscloud</a></p>
			<p class="text-muted">京ICP备14004349号 京公网安备110108002872号 京ICP证110355号</p><br/>
		</div>
	</footer>
	<script src="/static/js/jquery-1.11.2.min.js"></script>
	<script src="/static/js/model/bootstrap-3.3.1-dist/dist/js/bootstrap.min.js"></script>
    <script src="/static/js/model/bootstrap-3.3.1-dist/dist/js/docs.min.js"></script>
    
    <script src="http://ajax.googleapis.com/ajax/libs/jqueryui/1.11.3/jquery-ui.min.js"></script>
    <script src="/static/js/model/GoJS-1.6.4/release/go.js"></script>
    <script src="/static/js/model/GoJS-1.6.4/extensions/DataInspector.js"></script>
    <script src="/static/js/model/GoJS-1.6.4/extensions/Robot.js"></script>
    <script src="/static/js/model/GoJS-1.6.4/extensions/DrawCommandHandler.js"></script>
    <script src="/static/js/model/GoJS-1.6.4/extensions/BPMNClasses.js"></script>
    <script src="/static/js/model/GoJS-1.6.4/extensions/BPMN.js"></script>
	<script type="text/javascript">
        $(document).ready(function(){
            //editorInit();
            init();
		});
        function layout() {
    myDiagram.layoutDiagram(true);
  }

  // Show the diagram's model in JSON format
  function save() {
    document.getElementById("mySavedModel").value = myDiagram.model.toJson();
    myDiagram.isModified = false;
  }
  function load() {
    myDiagram.model = go.Model.fromJson(document.getElementById("mySavedModel").value);
  }
        function editorInit() {
        var robot;  // this global variable will hold an instance of the Robot class for myDiagram

        var GO = go.GraphObject.make;  // for conciseness in defining templates

    var yellowgrad = GO(go.Brush, "Linear", { 0: "rgb(254, 201, 0)", 1: "rgb(254, 162, 0)" });
    var greengrad = GO(go.Brush, "Linear", { 0: "#98FB98", 1: "#9ACD32" });
    var bluegrad = GO(go.Brush, "Linear", { 0: "#B0E0E6", 1: "#87CEEB" });
    var redgrad = GO(go.Brush, "Linear", { 0: "#C45245", 1: "#7D180C" });
    var whitegrad = GO(go.Brush, "Linear", { 0: "#F0F8FF", 1: "#E6E6FA" });

    var bigfont = "normal 13pt Helvetica, Arial, sans-serif";
    var smallfont = "normal 11pt Helvetica, Arial, sans-serif";

    // Common text styling
    function textStyle() {
      return {
        margin: 6,
        //wrap: go.TextBlock.WrapFit,
        //textAlign: "center",
        editable: true,
        font: bigfont,
        isMultiline: false  // don't allow newlines in text
      }
    }

    myDiagram =
      GO(go.Diagram, "myDiagramDiv",
        {
          // have mouse wheel events zoom in and out instead of scroll up and down
          "toolManager.mouseWheelBehavior": go.ToolManager.WheelZoom,
          allowDrop: true,  // support drag-and-drop from the Palette
          initialAutoScale: go.Diagram.Uniform,
          "linkingTool.direction": go.LinkingTool.ForwardsOnly,
          initialContentAlignment: go.Spot.Center,
          layout: GO(go.LayeredDigraphLayout, { isInitial: false, isOngoing: false, layerSpacing: 50 }),
          // allow Ctrl-G to call groupSelection()
          "commandHandler.archetypeGroupData": { text: "Group", isGroup: true, color: "green" },
          "undoManager.isEnabled": true
        });

    // when the document is modified, add a "*" to the title and enable the "Save" button
    myDiagram.addDiagramListener("Modified", function(e) {
      var button = document.getElementById("SaveButton");
      if (button) button.disabled = !myDiagram.isModified;
      var idx = document.title.indexOf("*");
      if (myDiagram.isModified) {
        if (idx < 0) document.title += "*";
      } else {
        if (idx >= 0) document.title = document.title.substr(0, idx);
      }
    });

    var defaultAdornment =
      GO(go.Adornment, "Spot",
        GO(go.Panel, "Auto",
          GO(go.Shape, { fill: null, stroke: "dodgerblue", strokeWidth: 4 }),
          GO(go.Placeholder)),
        // the button to create a "next" node, at the top-right corner
        GO("Button",
          { alignment: go.Spot.TopRight,
            click: addNodeAndLink },  // this function is defined below
          new go.Binding("visible", "", function(a) { return !a.diagram.isReadOnly; }).ofObject(),
          GO(go.Shape, "PlusLine", { desiredSize: new go.Size(6, 6) })
        )
      );

    // define the Node template
    myDiagram.nodeTemplate =
      GO(go.Node, "Auto",
        { selectionAdornmentTemplate: defaultAdornment },
        new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
        // define the node's outer shape, which will surround the TextBlock
        GO(go.Shape, "Rectangle",
          { fill: yellowgrad, stroke: "black",
            portId: "", fromLinkable: true, toLinkable: true, cursor: "pointer",
            toEndSegmentLength: 50, fromEndSegmentLength: 40 }),
        GO(go.TextBlock, "Page",
          { margin: 6,
            font: bigfont,
            editable: true },
          new go.Binding("text", "text").makeTwoWay()));

    myDiagram.nodeTemplateMap.add("HostService",
      GO(go.Node, "Auto",
        new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
        // new go.Binding("text", "text"),
        GO(go.Shape, "RoundedRectangle",{ 
          fill: "#FFFFFF",
          portId: "", cursor: "pointer",  // the Shape is the port, not the whole Node
        // allow all kinds of links from and to this port
        fromLinkable: true, fromLinkableSelfNode: false, fromLinkableDuplicates: true,
        toLinkable: true, toLinkableSelfNode: false, toLinkableDuplicates: true
        }),
        GO(go.Panel, "Horizontal",
            GO(go.Picture,
                      // Pictures should normally have an explicit width and height.
                      // This picture has a red background, only visible when there is no source set
                      // or when the image is partially transparent.
                      { source:"/static/images/resources/host.jpg", margin: 5, width: 30, height: 30}
            ),
            GO(go.TextBlock, "HostService", textStyle(), new go.Binding("text", "text").makeTwoWay()
            )
        ), // end Horizontal Panel
        GO(go.TextBlock,
              new go.Binding("text", "instances"),
              { alignment: go.Spot.TopRight, //background: "lightgreen", 
              stroke: "yellowgrad", 
              font: "bold 12pt", editable:false } 
        )
        ));
        
    myDiagram.nodeTemplateMap.add("DockerService",
      GO(go.Node, "Auto",
        new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
        // new go.Binding("text", "text"),
        GO(go.Shape, "RoundedRectangle",{ 
          fill: "#FFFFFF",
          portId: "", cursor: "pointer",  // the Shape is the port, not the whole Node
        // allow all kinds of links from and to this port
        fromLinkable: true, fromLinkableSelfNode: false, fromLinkableDuplicates: true,
        toLinkable: true, toLinkableSelfNode: false, toLinkableDuplicates: true
        }),
        GO(go.Panel, "Horizontal",
            GO(go.Picture,
                      // Pictures should normally have an explicit width and height.
                      // This picture has a red background, only visible when there is no source set
                      // or when the image is partially transparent.
                      { source:"/static/images/resources/docker.jpg", margin: 5, width: 30, height: 30}),
            GO(go.TextBlock, "DockerService", textStyle(), new go.Binding("text", "text").makeTwoWay()
              )
        ), // end Horizontal Panel
        GO(go.TextBlock,
              new go.Binding("text", "instances"),
              { alignment: go.Spot.TopRight, //background: "lightgreen", 
              stroke: "yellowgrad", 
              font: "bold 12pt", editable:false } 
        )
        ));
    
    myDiagram.nodeTemplateMap.add("APIProxy",
      GO(go.Node, "Auto",
        new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
        // new go.Binding("text", "text"),
        GO(go.Shape, "RoundedRectangle",{ 
          fill: "#FFFFFF",
          portId: "", cursor: "pointer",  // the Shape is the port, not the whole Node
        // allow all kinds of links from and to this port
        fromLinkable: true, fromLinkableSelfNode: false, fromLinkableDuplicates: true,
        toLinkable: true, toLinkableSelfNode: false, toLinkableDuplicates: true
        }),
        GO(go.Panel, "Horizontal",
            GO(go.Picture,
                      // Pictures should normally have an explicit width and height.
                      // This picture has a red background, only visible when there is no source set
                      // or when the image is partially transparent.
                      { source:"/static/images/resources/proxy.jpg", margin: 5, width: 30, height: 30}),
            GO(go.TextBlock, "APIProxy", textStyle(), new go.Binding("text", "text").makeTwoWay()
              )
        ), // end Horizontal Panel
        GO(go.TextBlock,
              new go.Binding("text", "instances"),
              { alignment: go.Spot.TopRight, //background: "lightgreen", 
              stroke: "yellowgrad", 
              font: "bold 12pt", editable:false } 
        )
        ));
    
    myDiagram.nodeTemplateMap.add("VirtualNode",
      GO(go.Node, "Auto",
        new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
        // new go.Binding("text", "text"),
        GO(go.Shape, "RoundedRectangle",{ 
          fill: "#FFFFFF",
          portId: "", cursor: "pointer",  // the Shape is the port, not the whole Node
        // allow all kinds of links from and to this port
        fromLinkable: true, fromLinkableSelfNode: false, fromLinkableDuplicates: true,
        toLinkable: true, toLinkableSelfNode: false, toLinkableDuplicates: true
        }),
        GO(go.Panel, "Horizontal",
            GO(go.Picture,
                      // Pictures should normally have an explicit width and height.
                      // This picture has a red background, only visible when there is no source set
                      // or when the image is partially transparent.
                      { source:"/static/images/resources/vnode.jpg", margin: 5, width: 30, height: 30}),
            GO(go.TextBlock, "VirtualNode", textStyle(), new go.Binding("text", "text").makeTwoWay()
              )
        ), // end Horizontal Panel
        GO(go.TextBlock,
              new go.Binding("text", "instances"),
              { alignment: go.Spot.TopRight, //background: "lightgreen", 
              stroke: "yellowgrad", 
              font: "bold 12pt", editable:false } 
        )
        ));
    
    myDiagram.nodeTemplateMap.add("DesiredEvent",
      GO(go.Node, "Auto",
        new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
        GO(go.Shape, "RoundedRectangle",
          { fill: greengrad, portId: "", toLinkable: true, toEndSegmentLength: 50 }),
        GO(go.TextBlock, "Success!", textStyle(),
          new go.Binding("text", "text").makeTwoWay())
        ));

    // Undesired events have a special adornment that allows adding additional "reasons"
    var UndesiredEventAdornment =
      GO(go.Adornment, "Spot",
        GO(go.Panel, "Auto",
          GO(go.Shape, { fill: null, stroke: "dodgerblue", strokeWidth: 4 }),
          GO(go.Placeholder)),
        // the button to create a "next" node, at the top-right corner
        GO("Button",
          { alignment: go.Spot.BottomRight,
            click: addReason },  // this function is defined below
          new go.Binding("visible", "", function(a) { return !a.diagram.isReadOnly; }).ofObject(),
          GO(go.Shape, "TriangleDown", { desiredSize: new go.Size(10, 10) })
        )
      );

    var reasonTemplate = GO(go.Panel, "Horizontal",
      GO(go.TextBlock, "Reason",
        {
          margin: new go.Margin(4,0,0,0),
          maxSize: new go.Size(200, NaN),
          wrap: go.TextBlock.WrapFit,
          stroke: "whitesmoke",
          editable: true,
          font: smallfont
        },
        new go.Binding("text", "text").makeTwoWay())
      );


    myDiagram.nodeTemplateMap.add("UndesiredEvent",
      GO(go.Node, "Auto",
        new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
        { selectionAdornmentTemplate: UndesiredEventAdornment },
        GO(go.Shape, "RoundedRectangle",
          { fill: redgrad, portId: "", toLinkable: true, toEndSegmentLength: 50 }),
        GO(go.Panel, "Vertical", {defaultAlignment: go.Spot.TopLeft},

          GO(go.TextBlock, "Drop", textStyle(),
            { stroke: "whitesmoke",
              minSize: new go.Size(80, NaN) },
            new go.Binding("text", "text").makeTwoWay()),

          GO(go.Panel, "Vertical",
            { defaultAlignment: go.Spot.TopLeft,
              itemTemplate: reasonTemplate },
            new go.Binding("itemArray", "reasonsList").makeTwoWay()
          )
        )
        ));

    myDiagram.nodeTemplateMap.add("CommentText",
      GO(go.Node, "Auto",
        new go.Binding("location", "loc", go.Point.parse).makeTwoWay(go.Point.stringify),
        GO(go.Shape, "Rectangle",
          { portId: "", fill: bluegrad, fromLinkable: false }),
        GO(go.TextBlock, "CommentText",
          { margin: 9,
            maxSize: new go.Size(200, NaN),
            wrap: go.TextBlock.WrapFit,
            editable: true,
            font: bigfont },
          new go.Binding("text", "text").makeTwoWay())
        // no ports, because no links are allowed to connect with a comment
        ));

    // clicking the button on an UndesiredEvent node inserts a new text object into the panel
    function addReason(e, obj) {
      var adorn = obj.part;
      if (adorn === null) return;
      e.handled = true;
      var arr = adorn.adornedPart.data.reasonsList;
      myDiagram.startTransaction("add reason");
      myDiagram.model.addArrayItem(arr, {});
      myDiagram.commitTransaction("add reason");
    }

    // clicking the button of a default node inserts a new node to the right of the selected node,
    // and adds a link to that new node
    function addNodeAndLink(e, obj) {
      var adorn = obj.part;
      if (adorn === null) return;
      e.handled = true;
      var diagram = adorn.diagram;
      diagram.startTransaction("Add State");
      // get the node data for which the user clicked the button
      var fromNode = adorn.adornedPart;
      var fromData = fromNode.data;
      // create a new "State" data object, positioned off to the right of the adorned Node
      var toData = { text: "new" };
      var p = fromNode.location;
      toData.loc = p.x + 200 + " " + p.y;  // the "loc" property is a string, not a Point object
      // add the new node data to the model
      var model = diagram.model;
      model.addNodeData(toData);
      // create a link data from the old node data to the new node data
      var linkdata = {};
      linkdata[model.linkFromKeyProperty] = model.getKeyForNodeData(fromData);
      linkdata[model.linkToKeyProperty] = model.getKeyForNodeData(toData);
      // and add the link data to the model
      model.addLinkData(linkdata);
      // select the new Node
      var newnode = diagram.findNodeForData(toData);
      diagram.select(newnode);
      diagram.commitTransaction("Add State");
    }

    // replace the default Link template in the linkTemplateMap
    /*myDiagram.linkTemplate =
      GO(go.Link,  // the whole link panel
        new go.Binding("points").makeTwoWay(),
        { //routing: go.Link.Orthogonal,  // may be either Orthogonal or AvoidsNodes
        //curve: go.Link.JumpOver },
        //routing: go.Link.Normal//,
        curve: go.Link.Bezier//,
        //toShortLength: 8
        },
        //new go.Binding("curviness", "curviness"),
        GO(go.Shape,  // the link shape
          { stroke: "black", strokeWidth: 1.0 }),
        GO(go.Shape,  // the arrowhead
          { toArrow: "Standard", fill: "black"})
    );*/
    
    myDiagram.linkTemplate =
    GO(go.Link,
      //{ curve: go.Link.Bezier },  // Bezier curve
      GO(go.Shape),
      GO(go.Shape, { toArrow: "Standard" })
    );
    
    myDiagram.linkTemplateMap.add("Comment",
      GO(go.Link, { selectable: false },
        GO(go.Shape, { strokeWidth: 2, stroke: "darkgreen" })));
        
    // Groups consist of a title in the color given by the group node data
    // above a translucent gray rectangle surrounding the member parts
    myDiagram.groupTemplate =
      GO(go.Group, "Vertical",
        { selectionObjectName: "PANEL",  // selection handle goes around shape, not label
          ungroupable: true },  // enable Ctrl-Shift-G to ungroup a selected Group
        GO(go.TextBlock,
          {
            font: "bold 19px sans-serif",
            isMultiline: false,  // don't allow newlines in text
            editable: true  // allow in-place editing by user
          },
          new go.Binding("text", "text").makeTwoWay(),
          new go.Binding("stroke", "color")),
        GO(go.Panel, "Auto",
          { name: "PANEL" },
          GO(go.Shape, "Rectangle",  // the rectangular shape around the members
            { fill: "rgba(128,128,128,0.2)", stroke: "gray", strokeWidth: 3 }),
          GO(go.Placeholder, { padding: 10 })  // represents where the members are
        )
      );


    // a shared Robot that can be used by all commands for this one Diagram
    robot = new Robot(myDiagram);  // defined in Robot.js

    var palette =
      GO(go.Palette, "palette",  // create a new Palette in the HTML DIV element "palette"
        {
          // share the template map with the Palette
          nodeTemplateMap: myDiagram.nodeTemplateMap,
          autoScale: go.Diagram.Uniform  // everything always fits in viewport
        });

    palette.model.nodeDataArray = [
      { category: "HostService",text:"HostService", instances:"" },
      { category: "DockerService",text:"DockerService", instances:"" },
      { category: "APIProxy",text:"APIProxy", instances:"" },
      //{ }, // default node
      //{ category: "DesiredEvent" },
      { category: "VirtualNode",text:"VirtualNode", instances:"" },
      //{ category: "UndesiredEvent", reasonsList: [{}] },
      { category: "CommentText"}
    ];

    // read in the JSON-format data from the "mySavedModel" element
    
    load();
    //layout();
    
    $(function() {
        /*$("#paletteDraggable").draggable({handle: "#paletteDraggableHandle"}).resizable({
          // After resizing, perform another layout to fit everything in the palette's viewport
          stop: function(){ myPalette.layoutDiagram(true); }
        });*/

        $("#infoDraggable").draggable({handle: "#infoDraggableHandle"}).resizable({ });


        var inspector = new Inspector('myInfo', myDiagram,
          {
            properties: {
              // key would be automatically added for nodes, but we want to declare it read-only also:
              "key": { readOnly: true, show: Inspector.showIfPresent },
              // fill and stroke would be automatically added for nodes, but we want to declare it a color also:
              "fill": { show: Inspector.showIfPresent, type: 'color' },
              "stroke": { show: Inspector.showIfPresent, type: 'color' },
              "category": { readOnly: true, show: Inspector.showIfPresent }
            }
          });
        });


  }
	</script>
</body>
</html>
