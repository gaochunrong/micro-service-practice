#####REF: http://www.abc3210.com/2013/web_04/82.shtml http://www.tuicool.com/articles/q22YFv http://storysky.blog.51cto.com/628458/642970/
	#####HttpLimitReqModul用来限制连单位时间内连接数的模块，使用limit_req_zone和limit_req指令配合使用来达到限制。
	#####一旦并发连接超过指定数量，就会返回503错误。HttpLimitReqModul 限制某一段时间内同一ip访问数实例。
	#定义一个名为allips的limit_req_zone用来存储session，大小是10M内存，
    #以$binary_remote_addr 为key,限制平均每秒的请求为20个，
    #1M能存储16000个状态，rete的值必须为整数，
    #如果限制两秒钟一个请求，可以设置成30r/m
    #limit_req_zone $binary_remote_addr zone=allips:10m rate=20r/s;
	#server{
        #location {
            #限制每ip每秒不超过20个请求，漏桶数burst为5
            #brust的意思就是，如果第1秒、2,3,4秒请求为19个，
            #第5秒的请求为25个是被允许的。
            #但是如果你第1秒就25个请求，第2秒超过20的请求返回503错误。
            #nodelay，如果不设置该选项，严格使用平均速率限制请求数，
            #第1秒25个请求时，5个请求放到第2秒执行，
            #设置nodelay，25个请求将在第1秒执行。
            #limit_req zone=allips burst=5 nodelay;
        #}
    #}

	#####HttpLimitConnModul用来限制单个ip的并发连接数，使用limit_zone和limit_conn指令。
	#####这两个模块的区别前一个是对一段时间内的连接数限制，后者是对同一时刻的连接数限制。
	#####HttpLimitZoneModule 限制并发连接数实例。limit_zone只能定义在http作用域，limit_conn可以定义在http server location作用域。
    #定义一个名为one的limit_zone,大小10M内存来存储session，
    #以$binary_remote_addr 为key
    #nginx 1.18以后用limit_conn_zone替换了limit_conn
    #且只能放在http作用域
    #limit_conn_zone   one  $binary_remote_addr  10m;
    #server{
        #location {
           #limit_conn one 20;          #连接数限制
           #带宽限制,对单个连接限数，如果一个ip两个连接，就是500x2k
           #limit_rate 500k;         
        #}
    #}
	
	
#add_header Cache-Control no-cache;
server_tokens off; #关闭错误页面显示nginx版本号, Nginx配置性能优化的方法, REF: http://os.51cto.com/art/201404/434930.htm
#https://segmentfault.com/q/1010000002578217/a-1020000002578576 http://blog.csdn.net/heng_2679/article/details/7050211


server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        # proxy the PHP scripts to Apache listening on 127.0.0.1:80
        #
        #location ~ \.php$ {
        #    proxy_pass   http://127.0.0.1;
        #}

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        #location ~ \.php$ {
        #    root           html;
        #    fastcgi_pass   127.0.0.1:9000;
        #    fastcgi_index  index.php;
        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
        #    include        fastcgi_params;
        #}

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}